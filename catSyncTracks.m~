%% exp = catSyncTracks(exp).m
%
% This function:
%   (1) Scales track times into timeseries objects so they can be 
%           conveniently resampled in different timebases
%   (2) Synchronizes serialID time codes to videoID time codes and places
%           them in the videoTime timecode.
%   (3) Concatenates all data into a wholeTrack
%
% Need to compute angles AFTER interpolation!
% Compute the head angle over a range of 0-2pi
% ts5 = atan2(track(:,4,:),track(:,3,:));
% ix = find(track.angle < 0);
% track.angle(ix) = track.angle(ix) + 2*pi;
%
% JSB 12/2012
%%
function exp = catScaleSyncTracks(exp)

    wholeRawTrack.bodyX = [];
    wholeRawTrack.bodyY = [];
    wholeRawTrack.headX = [];
    wholeRawTrack.headY = [];
    wholeRawTrack.videoID = [];
    wholeRawTrack.rawVideoTime = [];
    wholeRawTrack.serialID = [];
    wholeRawTrack.serialTime = [];

    % For each epoch extract and normalize data
    for epochN = 1:exp.nEpochs

        % Get the info from the rawTrack
        rawTrack = exp.epoch(epochN).rawTrack;
        serialRecord = exp.epoch(epochN).serialRecord;
        bodyX     = rawTrack(:,1,:);
        bodyY     = rawTrack(:,2,:);
        headX     = rawTrack(:,3,:);
        headY     = rawTrack(:,4,:);
        videoID      = rawTrack(:,5,1);
        rawVideoTime    = rawTrack(:,6,1);
        rawSerialID     = serialRecord(:,1);
        rawSerialTime   = serialRecord(:,2);

        % Normalize videoTime to start at 0, scale to seconds
        videoTime = (rawVideoTime - rawVideoTime(1)).*(24*60*60);
        % Scale coordinates to lane center, mm
        ts1 = timeseries(  bodyX, videoTime, 'Name', 'bodyX');
        ts2 = timeseries(  bodyY, videoTime, 'Name', 'bodyY');
        ts3 = timeseries(  headX, videoTime, 'Name', 'headX');
        ts4 = timeseries(  headY, videoTime, 'Name', 'headY');
        ts5 = timeseries(videoID, videoTime, 'Name', 'videoID');

        % Remove themometer ID codes because they don't carry time info
        ix = find(rawSerialID < hex2dec('fe'));
        serialID   = rawSerialID(ix);
        serialTime = rawSerialTime(ix);
        % Remove Time wraps so serialTime increases monotonically
        ix = find(diff(serialTime) < 0);
        while (size(ix,1) > 0)
            firstWrappedTime = ix(1) + 1;
            serialTime(firstWrappedTime:end) = serialTime(firstWrappedTime:end) + 16*10^6;
            ix = find(diff(serialTime) < 0);
        end

        % Fit a model to the times
        timeModel = fitTimeModel(videoID, videoTime, serialID, serialTime - serialTime(1));
        fitSerialTime = timeModel(serialTime - serialTime(1));

        % Remove temperature codes from the serial stream since the time field doesn't contain times
        ts6 = timeseries(  serialID, fitSerialTime,'Name','serialID');
		ts7 = timeseries(serialTime, fitSerialTime,'Name','serialTime');


        % Collect the time series objects into a structure
        exp.epoch(epochN).track.bodyX       = ts1;
		exp.epoch(epochN).track.bodyY       = ts2;
		exp.epoch(epochN).track.bodyX       = ts3;
		exp.epoch(epochN).track.headY       = ts4;
		exp.epoch(epochN).track.videoID     = ts5;
		exp.epoch(epochN).track.serialID    = ts6;
		exp.epoch(epochN).track.serialTime  = ts7;


        % Save variables to concatenated wholeTrack
        wholeRawTrack.bodyX = cat(1,wholeRawTrack.bodyX, bodyX);
        wholeRawTrack.bodyY = cat(1,wholeRawTrack.bodyY, bodyY);
        wholeRawTrack.headX = cat(1,wholeRawTrack.headX, headX);
        wholeRawTrack.headY = cat(1,wholeRawTrack.headY, headY);
        wholeRawTrack.videoID = cat(1,wholeRawTrack.videoID, videoID);
        wholeRawTrack.rawVideoTime  = cat(1,wholeRawTrack.rawVideoTime, rawVideoTime);
        wholeRawTrack.serialID   = cat(1,wholeRawTrack.serialID, serialID);
        wholeRawTrack.serialTime = cat(1,wholeRawTrack.serialTime, serialTime);

    end

    % Scale videoTime to start at 0, in seconds
    videoTime = (wholeRawTrack.rawVideoTime - wholeRawTrack.rawVideoTime(1)).*(24*60*60);
    % Refer wholeTrack timeseries to videoTime
    ts1 = timeseries(wholeTrack.bodyX, videoTime, 'Name', 'bodyX');
    ts2 = timeseries(wholeTrack.bodyY, videoTime, 'Name', 'bodyY');
    ts3 = timeseries(wholeTrack.headX, videoTime, 'Name', 'headX');
    ts4 = timeseries(wholeTrack.headY, videoTime, 'Name', 'headY');
    ts5 = timeseries(wholeTrack.videoID, videoTime, 'Name', 'videoID');
    ts6 = timeseries(videoTime, videoTime, 'Name', 'videoTime');

    serialTime = wholeTrack.serialTime;
    % Remove Time wraps so serialTime increases monotonically
    % This needs to be done again because epochs have been de-wrapped
    % independently (but not scaled to 0)
    ix = find(diff(serialTime) < 0);
    while (size(ix,1) > 0)
        firstWrappedTime = ix(1) + 1;
        serialTime(firstWrappedTime:end) = serialTime(firstWrappedTime:end) + 16*10^6;
        ix = find(diff(serialTime) < 0);
    end
    timeModel = fitTimeModel(wholeTrack.videoID, videoTime,...
                                wholeTrack.serialID, serialTime - serialTime(1));
    fitSerialTime = timeModel(serialTime - serialTime(1));
    ts7 = timeseries(wholeTrack.serialID, fitSerialTime,'Name','serialID');

    % Collect the time series objects into a collection
    exp.wholeTrack = tscollection({ts1 ts2 ts3 ts4 ts5 ts6 ts7});













